{"ast":null,"code":"var _jsxFileName = \"/Users/Tina/Downloads/01-starting-project5/src/App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from './components/AddMovie';\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // default method is get request\n      const response = await fetch(\"https://react-movie-faa6c-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      } // using fetch api will not throw an error until you try to opperate on the \n      // response data (as below with our .map method)\n      // axios would, but we are using fetch\n      // we add our own code to throw an error if the response is not ok\n\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message); // error.message is changing error to a string, the string above 'Something went\n      // wrong!'\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // this will fetch movies when app is loaded\n  // [fetchMoviesHandler] is set as the dependancies, so it will only reload when this changes\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://react-movie-faa6c-default-rtdb.firebaseio.com/movies.json\", {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  } // function fetchMoviesHandler() {\n  //   // default method is get request\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map(movieData => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date\n  //         }\n  //       })\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Tina/Downloads/01-starting-project5/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from './components/AddMovie'\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // default method is get request\n      const response = await fetch(\"https://react-movie-faa6c-default-rtdb.firebaseio.com/movies.json\");\n      \n      if (!response.ok) {\n        throw new Error('Something went wrong!')\n      }\n      // using fetch api will not throw an error until you try to opperate on the \n      // response data (as below with our .map method)\n      // axios would, but we are using fetch\n      // we add our own code to throw an error if the response is not ok\n      \n      const data = await response.json();\n\n      const loadedMovies = []\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        })\n      }\n\n      setMovies(loadedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message)\n      // error.message is changing error to a string, the string above 'Something went\n      // wrong!'\n    }\n    setIsLoading(false);\n  }, [])\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  // this will fetch movies when app is loaded\n  // [fetchMoviesHandler] is set as the dependancies, so it will only reload when this changes\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://react-movie-faa6c-default-rtdb.firebaseio.com/movies.json\", {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n  }\n\n  if (error) {\n    content = <p>{error}</p>\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>\n  }\n\n  // function fetchMoviesHandler() {\n  //   // default method is get request\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map(movieData => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date\n  //         }\n  //       })\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {content}\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found no movies.</p>}\n        {isLoading && <p>Loading...</p>}\n        {!isLoading && error && <p>{error}</p>} */}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}